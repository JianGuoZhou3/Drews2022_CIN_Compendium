"Low_TRUE", "Medium_TRUE", "High_TRUE"))
pOut = ggplot(dtPlot, aes(x = Var2, y = value, fill = Col)) +
geom_hline(yintercept = 0, colour = "grey20", linetype = "dashed") +
geom_boxplot(outlier.size = 0.15) +
labs(x = "Signature", y = "Scaled activity", fill = "Cell cycle\nscore") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
# coord_cartesian(ylim = c(-3, 3)) +
coord_capped_cart(left = "both", bottom = "both", ylim = c(-2,2)) +
scale_fill_manual(values = c("Low_FALSE" = "white", "Medium_FALSE" = "white",  "High_FALSE" = "white",
"Low_TRUE" = "black", "Medium_TRUE" = "grey", "High_TRUE" = "gold"))
### Just three IHR signatures for figure 4
dtIHR = dtPlot[ dtPlot$Var2 %in% c("CX2", "CX5", "CX3"), ]
dtIHR$Var2 = factor(dtIHR$Var2, levels = c("CX2", "CX5", "CX3"))
pOut2 = ggplot(dtIHR, aes(x = Var2, y = value, fill = CCS)) +
geom_hline(yintercept = 0, colour = "grey20", linetype = "dashed") +
geom_boxplot(outlier.size = 0.15) + theme(legend.position = c(0.7, 0.7)) +
labs(x = "Signature", y = "Scaled activity", fill = "Cell cycle\nscore") +
coord_capped_cart(left = "both", bottom = "both", ylim = c(-1.2,2)) +
scale_fill_manual(values = c("black", "grey", "gold"))
pOut2
write.table(pOut2$data, "~/Dropbox/PhD/public/papers/CNSigs2 v6/_Excels_with_figure_data/EDF_9_b.txt", quote=FALSE, row.names = FALSE, col.names = TRUE, sep="\t")
## Correlating cell cycle scores with CX signature activities
rm(list=ls(all=TRUE))
library(this.path)
library(data.table)
library(reshape2)
library(ggplot2)
library(ggthemes)
library(lemon)
library(rstatix)
theme_set(theme_tufte(base_size = 6, base_family = "ArialMT"))
theme_update(text = element_text(size = 6),
axis.text = element_text(size = 6),
axis.line = element_line(size = 0.5),
axis.ticks = element_line(size = 0.5),
axis.ticks.length = unit(.1, "cm"))
BASE=dirname(this.path())
OUT=file.path(BASE, "output")
OUTTABLE=file.path(BASE, "output")
dir.create(OUT, showWarnings = FALSE, recursive = TRUE)
dir.create(OUTTABLE, showWarnings = FALSE, recursive = TRUE)
MEDIANSCALE=FALSE
EXP=file.path(BASE, "input/Signature_Compendium_v5_Cosine-0.74_Activities_THRESH95_NAMESAPRIL21.rds")
CCS=file.path(BASE, "input/Lundberg_2020_Cell_cycle_score.rds")
## Load data and merge cell cycle scores with signature activities
## For better visualisation, scaling is done with robust scaling using median and sd
if(MEDIANSCALE) {
mExp = readRDS(EXP)
scExp = apply(mExp, 2, function(x) (x-median(x))/sd(x))
dtExp = data.table(melt(scExp))
} else {
dtExp =  data.table(melt(scale(readRDS(EXP))))
}
dtCCS = data.table(readRDS(CCS))
dtCCS$Sample = substr(dtCCS$Sample, 1, 12)
dtExp$CCS = dtCCS$CCS[ match(substr(dtExp$Var1,1,12), dtCCS$Sample) ]
## According to Lundberg's script on github
dtExp$CCS = factor(as.numeric(dtExp$CCS), levels = c(1,2,3), labels = c("Low", "Medium", "High"))
## Not really needed
dtExp$CCS_ct = dtCCS$CCS_ct[ match(substr(dtExp$Var1,1,12), dtCCS$Sample) ]
dtExp$CCS_ct = (dtExp$CCS_ct-min(dtExp$CCS_ct, na.rm = TRUE))/
(max(dtExp$CCS_ct, na.rm = TRUE)-min(dtExp$CCS_ct, na.rm = TRUE))
## Identify signatures where high is significantly different to med and low
allSigs = levels(dtExp$Var2)
lTTest = lapply(allSigs, function(thisSig) {
print(thisSig)
dtSig = dtExp[ dtExp$Var2 == thisSig, ]
## Only interested when high is significant to medium and low
tHighVMed = t.test(dtSig$value[ dtSig$CCS == "High" ],
dtSig$value[ dtSig$CCS == "Medium" ], var.equal = FALSE)
tHighVLow = t.test(dtSig$value[ dtSig$CCS == "High" ],
dtSig$value[ dtSig$CCS == "Low" ], var.equal = FALSE)
out = c(thisSig, tHighVMed$statistic, tHighVMed$p.value,
tHighVLow$statistic, tHighVLow$p.value)
return(out)
})
dtCor = data.table(do.call(rbind, lTTest))
colnames(dtCor) = c("Sig", "HighVMed_t", "HighVMed_pVal", "HighVLow_t","HighVLow_pVal")
dtCor$HighVMed_t = signif(as.numeric(dtCor$HighVMed_t), 4)
dtCor$HighVMed_pVal = signif(as.numeric(dtCor$HighVMed_pVal), 4)
dtCor$HighVLow_t = signif(as.numeric(dtCor$HighVLow_t), 4)
dtCor$HighVLow_pVal = signif(as.numeric(dtCor$HighVLow_pVal), 4)
## Correct p-values and identify signatures where both tests are significant
dtCor$HighVMed_pAdj = p.adjust(dtCor$HighVMed_pVal, method = "BH")
dtCor$HighVLow_pAdj = p.adjust(dtCor$HighVLow_pVal, method = "BH")
dtCor$Sign = dtCor$HighVMed_pAdj < 0.05 & dtCor$HighVLow_pAdj < 0.05
## Plot
dtExp$SigSign = dtCor$Sign[ match(dtExp$Var2, dtCor$Sig) ]
## Manual curation of results (plot and then curate)
## Sigs where directionality changes going from low to medium to high: CS14
## Sigs with negative directionality are also ignored: CS1, CS11
dtExp$SigSign[ dtExp$Var2 %in% c("CX1", "CX6", "CX14") ] = FALSE
dtExp$Col = paste(dtExp$CCS, dtExp$SigSign, sep = "_")
## Prepare plot
dtPlot = dtExp[ ! is.na(dtExp$CCS), ]
dtPlot$Col = factor(dtPlot$Col, levels = c("Low_FALSE", "Medium_FALSE", "High_FALSE",
"Low_TRUE", "Medium_TRUE", "High_TRUE"))
pOut = ggplot(dtPlot, aes(x = Var2, y = value, fill = Col)) +
geom_hline(yintercept = 0, colour = "grey20", linetype = "dashed") +
geom_boxplot(outlier.size = 0.15) +
labs(x = "Signature", y = "Scaled activity", fill = "Cell cycle\nscore") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
# coord_cartesian(ylim = c(-3, 3)) +
coord_capped_cart(left = "both", bottom = "both", ylim = c(-2,2)) +
scale_fill_manual(values = c("Low_FALSE" = "white", "Medium_FALSE" = "white",  "High_FALSE" = "white",
"Low_TRUE" = "black", "Medium_TRUE" = "grey", "High_TRUE" = "gold"))
cairo_pdf(file.path(OUT, "SuppFig_30_Cell_cycle_score.pdf"), width = 180/25.4, height =  120/25.4)
print(pOut); dev.off()
ggsave(file.path(OUT, "SuppFig_30_Cell_cycle_score.svg"), pOut, width = 180, height = 120, units = "mm")
write.table(dtPlot, file.path(OUTTABLE, "Supp_Table_Cell_cycle_score.txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
saveRDS(dtPlot, file.path(OUTTABLE, "Supp_Table_Cell_cycle_score.rds"))
write.table(dtCor, file.path(OUTTABLE, "Supp_Table_Cell_cycle_score_pVals.txt"), quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
### Just three IHR signatures for Extended Data Figure 4C
dtIHR = dtPlot[ dtPlot$Var2 %in% c("CX2", "CX5", "CX3"), ]
dtIHR$Var2 = factor(dtIHR$Var2, levels = c("CX2", "CX5", "CX3"))
pOut2 = ggplot(dtIHR, aes(x = Var2, y = value, fill = CCS)) +
geom_hline(yintercept = 0, colour = "grey20", linetype = "dashed") +
geom_boxplot(outlier.size = 0.15) + theme(legend.position = c(0.7, 0.7)) +
labs(x = "Signature", y = "Scaled activity", fill = "Cell cycle\nscore") +
coord_capped_cart(left = "both", bottom = "both", ylim = c(-1.2,2)) +
scale_fill_manual(values = c("black", "grey", "gold"))
ggsave(file.path(OUT, "ExtendedDataFigure_4_C_Cell_cycle_score.svg"), pOut2, width = 60, height = 45, units = "mm")
## T-test
statTest <- dtIHR %>%
group_by(Var2) %>%
t_test(value ~ CCS, var.equal = FALSE, p.adjust.method = "BH")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls(all=TRUE))
suppressPackageStartupMessages({
# Standard packages used throughout repo
library(here)
library(data.table)
library(reshape2)
library(ggplot2)
library(ggthemes)
library(lemon)
library(RColorBrewer)
# For survival analysis
library(survival)
library(survminer)
library(cmprsk)
library(compositions)
# SVM
library(caret)
})
theme_set(theme_tufte(base_size = 6, base_family = "ArialMT"))
theme_update(text = element_text(size = 6),
axis.text = element_text(size = 6),
axis.line = element_line(size = 0.5),
axis.ticks = element_line(size = 0.5),
axis.ticks.length = unit(.1, "cm"))
## Paths
BASE=dirname(rstudioapi::getSourceEditorContext()$path)
OUTFIGURES=file.path(BASE, "output")
OUTTABLE=file.path(BASE, "output")
dir.create(OUTFIGURES, showWarnings = FALSE, recursive = TRUE)
dir.create(OUTTABLE, showWarnings = FALSE, recursive = TRUE)
# Of output files
WIDTH=100/25.4
HEIGHT=70/25.4
## Data - TCGA
ACTIVITIES=file.path(BASE, "input/Signature_Compendium_v5_Cosine-0.74_Activities_THRESH95_NAMESAPRIL21.rds")
META=file.path(BASE, "input/Metadata_TCGA_ASCAT_penalty70.rds")
LINK=file.path(BASE, "input/TCGA_PCAWG_links_plusCancer.rds")
# From Degasperi et al. 2020
HRDETECT=file.path(BASE, "input/Degasperi2020_HRDetect_PCAWG.txt")
# From Knijnenburg et al. 2018, downloaded and preprocessed by Jordan Griffin (Gerke Lab, github repo: TCGAhrd)
HRDSCORES=file.path(BASE, "input/Knijnenburg2018_HRD_Scores_TCGA_GerkeLabGithub.txt")
# From Marquard et al. 2015 (Has more OV data than Knijnenburg et al., 2018)
HRDSCORES2=file.path(BASE, "input/Marquard2015_HRD_Scores_TCGA.txt")
## From previous survival analysis (Compile_survival_data_onlyclin.R)
SURVIVALOV=file.path(BASE, "input/Survival_and_BRCA_Status_TCGA-OV.rds")
## Classifier - output
CLASSFILE=file.path(OUTTABLE, "CX3CX2_Clinical_classifier.rds")
## Data - PCAWG
PCAWG=file.path(BASE, "input/PCAWG_signature_activities_THRESH095_NAMESAPRIL21.rds")
METAPCAWG=file.path(BASE, "input/PCAWG_1900_samples_CINSig_activities_metadata_plus_HRDetect.rds")
SURVPCAWG=file.path(BASE, "input/pcawg_donor_clinical_August2016_v9.fixed.tsv")
TSPCAWG=file.path(BASE, "input/donor.tsv")
## Data - ICGC (560 Breast cancers)
ICGC560=file.path(BASE, "input/ICGC_560BCs_signature_activities_THRESH095_NAMESAPRIL21.rds")
METAICGC560=file.path(BASE, "input/Meta_560BreastCancers.tsv")
HRDETECTICGC560=file.path(BASE, "input/Meta_560BreastCancers_HRDetect.txt")
## Other essential variables
AGEBRACKETS=c(0, 53, 62, 76, 100)
## Load essential files
links = readRDS(LINK)
## Little function for applying the classifier to a data frame with columns "CX3", "CX2" and "Name"
applyClinClass = function(dtSurvOV, lModel) {
## Scale the activities
mTCGAOV = as.matrix(dtSurvOV[ , c("CX3", "CX2")])
rownames(mTCGAOV) = dtSurvOV$Name
smTCGAOV = sweep(sweep(mTCGAOV, 2, lModel$mean, FUN = '-'), 2, lModel$scale, FUN = "/")
dtSurvOV$sCX3 = smTCGAOV[,"CX3"]
dtSurvOV$sCX2 = smTCGAOV[,"CX2"]
## Apply classifier
if(identical(dtSurvOV$Name, rownames(smTCGAOV))) {
dtSurvOV$Classifier = ifelse(dtSurvOV$sCX3 >= dtSurvOV$sCX2, "Predicted sensitive", "Predicted resistant")
} else {
stop("Something went wrong.")
}
return(dtSurvOV)
}
## Bread and butter function of this markdown
plotKMandCoxOS = function(dtSurvOV, COHORTNAME = "TCGA-OV", CLASSIFIERNAME = "CX3/CX2 classifier", COXMODEL = "Full") {
## Argument: CLASSIFIER = "Classifier"
### Cannot get the automatic handling of variable CLASSIFIER from within the function. It is not recognised within the function despite being defined.
# kmOV = survfit(Surv(OS.time, OS) ~ Classifier, data = dtSurvOV)
# CLASSIFIER = noquote(COLNAME)
# print(CLASSIFIER)
# print(exists(CLASSIFIER))
# kmOV = survfit(Surv(OS.time, OS) ~ get(CLASSIFIER), data = dtSurvOV)
kmOV = survfit(reformulate(termlabels = CLASSIFIER, response = 'Surv(OS.time, OS)'), data = dtSurvOV)
# kmOV = survfit(as.formula(paste("Surv(OS.time, OS)~", paste(TEST))), data = dtSurvOV)
pKMOV = ggsurvplot(kmOV, data = dtSurvOV, risk.table = TRUE, pval = TRUE, conf.int = FALSE,
xlim = c(0,4000), break.time.by = 365,
ggtheme = theme_tufte(base_size = 6, base_family = "ArialMT"),
surv.median.line = "hv", risk.table.y.text.col = TRUE, risk.table.y.text = FALSE) +
ggtitle(paste("OS in", COHORTNAME, "patients by", CLASSIFIERNAME))
# Cox model
# resCoxOV = coxph(Surv(OS.time, OS) ~ Classifier + AgeCategory + TS, data =  dtSurvOV)
if(COXMODEL == "Full") {
resCoxOV = coxph(reformulate(termlabels = paste(CLASSIFIER, "AgeCategory", "TS", sep = "+"), response = 'Surv(OS.time, OS)'), data = dtSurvOV)
} else {
resCoxOV = coxph(reformulate(termlabels = paste(CLASSIFIER, "AgeCategory", sep = "+"), response = 'Surv(OS.time, OS)'), data = dtSurvOV)
}
# Don't attempt to plot if Cox model failed
nFailedCox = sum(is.na(resCoxOV$coefficients))
if(nFailedCox != length(resCoxOV$coefficients)) {
pCoxOV = ggforest(resCoxOV, data = dtSurvOV, main = paste("Cox HR model for", COHORTNAME))
} else {
# Just an empty plot to not break the plotting later on.
pCoxOV = ggplot() + theme_void() + xlab(NULL) +
geom_text(aes(0,0,label = paste("Cox HR model for", COHORTNAME, "\nEmpty because Cox model failed to converge.")))
}
lOut = list(km = kmOV, kmPlot = pKMOV, cox = resCoxOV, coxPlot = pCoxOV)
return(lOut)
}
## Load data
dtSurvOV = readRDS(SURVIVALOV)
metaFull = readRDS(META)
## Cox model on HGSOC samples to investigate relationship with CIN signatures
# Prepare all signature activities and filter for OV
mTCGA = readRDS(ACTIVITIES)
# Log ratio transform activities - Cox models don't like compositional data
mLRTCGA = apply(mTCGA, 2, function(x) clr(x))
# Convert to data table and extract OV-only signature activities
dfTCGA = data.frame(mLRTCGA)
dfTCGA$Sample = rownames(dfTCGA)
dtTCGA = data.table(dfTCGA)
rm(dfTCGA)
dtTCGA$Cancer = metaFull$cancer_type[ match(dtTCGA$Sample, metaFull$name) ]
dtOV = dtTCGA[ dtTCGA$Cancer == "OV", ]
# For clinical covariates
dtOV$OS = dtSurvOV$OS[ match(dtOV$Sample, dtSurvOV$Name) ]
dtOV$OS.time = dtSurvOV$OS.time[ match(dtOV$Sample, dtSurvOV$Name) ]
dtOV$PFI = dtSurvOV$PFI[ match(dtOV$Sample, dtSurvOV$Name) ]
dtOV$PFI.time = dtSurvOV$PFI.time[ match(dtOV$Sample, dtSurvOV$Name) ]
dtOV$Age = dtSurvOV$AgeY[ match(dtOV$Sample, dtSurvOV$Name) ]
dtOV$Race = dtSurvOV$Race[ match(dtOV$Sample, dtSurvOV$Name) ]
dtOV$TS = dtSurvOV$TS[ match(dtOV$Sample, dtSurvOV$Name) ]
## Cox model
resCoxOS = coxph(Surv(OS.time, OS) ~ CX1 + CX2 + CX3 + CX4 + CX5 + CX6 + CX7 + CX8 + CX9 + CX10 + CX11  + CX12 + CX13 + CX14 + CX15 + CX16 + CX17 + Age + Race + TS, data =  dtOV)
pCoxOS = ggforest(resCoxOS, data = dtOV, main = "Cox HR model for TCGA-OV OS")
resCoxPFI = coxph(Surv(PFI.time, PFI) ~ CX1 + CX2 + CX3 + CX4 + CX5 + CX6 + CX7 + CX8 + CX9 + CX10 + CX11  + CX12 + CX13 + CX14 + CX15 + CX16 + CX17 + Age + Race + TS, data =  dtOV)
pCoxPFI = ggforest(resCoxPFI, data = dtOV, main = "Cox HR model for TCGA-OV PFI")
# Save output files
cairo_pdf(file.path(OUTFIGURES, "SuppFig_32_CoxPh_OS_ALLSIGS_Cont_TCGA-OV.pdf"),
width = 250/25.4, height = 150/25.4)
print(pCoxOS)
dev.off()
cairo_pdf(file.path(OUTFIGURES, "SuppFig_XX_CoxPh_OS_ALLSIGS_Cont_TCGA-PFI.pdf"),
width = 250/25.4, height = 150/25.4)
print(pCoxPFI)
dev.off()
## Build classifier on germline BRCA1 samples
dtSurvOV = readRDS(SURVIVALOV)
mBRCA1 = as.matrix(dtSurvOV[ dtSurvOV$Status == "germline BRCA1+LOH", c("CX3", "CX2")])
## The magic
smBRCA1 = scale(mBRCA1)
## Save model data
lModel = list(mean = attributes(smBRCA1)$`scaled:center`,
scale = attributes(smBRCA1)$`scaled:scale`)
saveRDS(lModel, CLASSFILE)
## Apply classifier to all TCGA-OV samples
dtSurvOV = applyClinClass(dtSurvOV, lModel)
## Plot for figure
pOut = ggplot(dtSurvOV[ dtSurvOV$Status == "germline BRCA1+LOH", ], aes(x = sCX3, y = sCX2, colour = Classifier)) +
geom_point() + geom_abline(slope = 1, intercept = 0, colour = "grey30", linetype = "dashed") +
theme(legend.position = "none", axis.line = element_line(size = 0.5),
axis.ticks = element_line(size = 0.5), axis.ticks.length = unit(.1, "cm"),
plot.margin = unit(c(0, 0, 0, 0), "null"),) +
coord_capped_cart(bottom = "both", left = "both", ylim = c(-2, 2)) +
labs(x = "Scaled CX3 activity", y = "Scaled CX2 activity") + theme(aspect.ratio = 1)
cairo_pdf(file.path(OUTFIGURES, "Figure_4_C_CX_Classifier.pdf"), width = 57.1/25.4, height = 57.1/25.4)
print(pOut); dev.off()
ggsave(file.path(OUTFIGURES, "Figure_4_C_CX_Classifier.svg"), pOut,
width = 57.1/25.4, height = 57.1/25.4)
## Load data
dtHRDetect = fread(HRDETECT)
## Transfer HRDetect status
dtHRDetect$TCGA = links$TCGA[ match(dtHRDetect$V1, links$PCAWG) ]
dtSurvOV$HRDetectScore = dtHRDetect$`HRDetect single score`[ match(substr(dtSurvOV$Name,1,12), dtHRDetect$TCGA) ]
dtSurvOV$HRDetectClass = dtSurvOV$HRDetectScore >= 0.7
dtSurvOV$HRDetectClass = factor(dtSurvOV$HRDetectClass, levels = c(FALSE, TRUE),
labels = c("Negative", "Positive"))
## Transfer HRD score
dtHRDScores = fread(HRDSCORES)
dtSurvOV$HRDScore = dtHRDScores$HRD_Score[ match(substr(dtSurvOV$Name,1,12), substr(dtHRDScores$patient_id,1,12)) ]
# From Marquard et al. 2015
dtHRDScores2 = fread(HRDSCORES2)
dtHRDScores2$HRDScore = dtHRDScores2$NtAI + dtHRDScores2$LST + dtHRDScores2$`HRD-LOH`
dtSurvOV$HRDScore2 = dtHRDScores2$HRDScore[ match(substr(dtSurvOV$Name,1,12), substr(dtHRDScores2$Tumor,1,12)) ]
## Combine both
dtSurvOV$HRDScore[ is.na(dtSurvOV$HRDScore)  ] = dtSurvOV$HRDScore2[ is.na(dtSurvOV$HRDScore)  ]
dtSurvOV$HRDScore2 = NULL
## Use Myriad myChoice classifier
dtSurvOV$MyriadmyChoice = ifelse(dtSurvOV$HRDScore >= 42, "Positive", "Negative")
dtSurvOV$MyriadmyChoice = factor(dtSurvOV$MyriadmyChoice, levels = c("Negative","Positive"))
#### Age categorisation chosen from age histogram so that it works across all cohorts equally
dtSurvOV$AgeCategory = cut(dtSurvOV$AgeY, breaks = AGEBRACKETS, labels = 1:(length(AGEBRACKETS)-1))
write.table(dtSurvOV, file.path(OUTTABLE, "Clinical_classifier_TCGA.txt"), quote = FALSE,
sep = "\t", row.names = FALSE, col.names = TRUE)
#### germline BRCA1
dtBRCA1 = dtSurvOV[ dtSurvOV$Status == "germline BRCA1+LOH", ]
## See comment in function?!
CLASSIFIER = "Classifier"
lgBRCA1CX = plotKMandCoxOS(dtBRCA1, COHORTNAME = "germline BRCA1 samples", CLASSIFIERNAME = "CX3/CX2 classifier")
CLASSIFIER = "HRDetectClass"
lgBRCA1HRDetect = plotKMandCoxOS(dtBRCA1, COHORTNAME = "germline BRCA1 samples", CLASSIFIERNAME = "HRDetect", COXMODEL = "simple")
CLASSIFIER = "MyriadmyChoice"
lgBRCA1Myriad = plotKMandCoxOS(dtBRCA1, COHORTNAME = "germline BRCA1 samples", CLASSIFIERNAME = "Myriad myChoice")
## All TCGA-OV
CLASSIFIER = "Classifier"
lTCGAOVCX = plotKMandCoxOS(dtSurvOV, COHORTNAME = "TCGA-OV", CLASSIFIERNAME = "CX3/CX2 classifier")
CLASSIFIER = "HRDetectClass"
lTCGAOVHRDetect = plotKMandCoxOS(dtSurvOV, COHORTNAME = "TCGA-OV", CLASSIFIERNAME = "HRDetect", COXMODEL = "simple")
CLASSIFIER = "MyriadmyChoice"
lTCGAOVMyriad = plotKMandCoxOS(dtSurvOV, COHORTNAME = "TCGA-OV", CLASSIFIERNAME = "Myriad myChoice")
## For figure 4D - need to know median of survival for whole cohort
dtSurvOV$NoClass = factor("NoClass")
CLASSIFIER = "NoClass"
print(survfit(reformulate(termlabels = CLASSIFIER, response = 'Surv(OS.time, OS)'), data = dtSurvOV))
lTCGAOVCX$km
lTCGAOVCX$cox
require(broom)
convertCoxPHToTextOut = function(resCoxOS, FILENAME, OUTPUTPATH = "~/Dropbox/PhD/public/papers/CNSigs2 v6/_Excels_with_figure_data/") {
# Convert to tidy
x = tidy(resCoxOS)
# Add estimate in exponential
x$expEst = exp(x$estimate)
# Add lower and upper boundaries
x$lowerEst = exp(x$estimate-2*x$std.error)
x$upperEst = exp(x$estimate+2*x$std.error)
write.table(x, file.path(OUTPUTPATH, FILENAME),
sep='\t',row.names = FALSE, col.names = TRUE, quote=FALSE)
return(x)
}
convertCoxPHToTextOut(lTCGAOVCX$cox, "EDF_10_b.txt")
lgBRCA1HRDetect$km
CLASSIFIER = "HRDetectClass"
lgBRCA1HRDetect = plotKMandCoxOS(dtBRCA1, COHORTNAME = "germline BRCA1 samples", CLASSIFIERNAME = "HRDetect", COXMODEL = "simple")
lgBRCA1HRDetect$km
lgBRCA1HRDetect$kmPlot
lgBRCA1HRDetect$cox
dtBRCA1
CLASSIFIER = "MyriadmyChoice"
lgBRCA1Myriad = plotKMandCoxOS(dtBRCA1, COHORTNAME = "germline BRCA1 samples", CLASSIFIERNAME = "Myriad myChoice")
lgBRCA1Myriad$km
lgBRCA1Myriad$cox
convertCoxPHToTextOut(lgBRCA1Myriad$cox, "EDF_10_c_gBRCA1_HRDScore.txt")
lTCGAOVHRDetect$kmPlot
lTCGAOVHRDetect$km
convertCoxPHToTextOut(lTCGAOVHRDetect$cox, "EDF_10_c_TCGAOV_HRDetect.txt")
## All TCGA-OV
CLASSIFIER = "Classifier"
lTCGAOVCX = plotKMandCoxOS(dtSurvOV, COHORTNAME = "TCGA-OV", CLASSIFIERNAME = "CX3/CX2 classifier")
CLASSIFIER = "HRDetectClass"
lTCGAOVHRDetect = plotKMandCoxOS(dtSurvOV, COHORTNAME = "TCGA-OV", CLASSIFIERNAME = "HRDetect", COXMODEL = "simple")
CLASSIFIER = "MyriadmyChoice"
lTCGAOVMyriad = plotKMandCoxOS(dtSurvOV, COHORTNAME = "TCGA-OV", CLASSIFIERNAME = "Myriad myChoice")
#
lTCGAOVMyriad$km
lTCGAOVMyriad$cox
convertCoxPHToTextOut(lTCGAOVMyriad$cox, "EDF_10_c_TCGAOV_HRDScore.txt")
## Prepare signature activities
mPCAWG = readRDS(PCAWG)
## Add survival
dtSurv = fread(SURVPCAWG)
metaPCAWG = readRDS(METAPCAWG)
dtPcawg = metaPCAWG[, c("projectcode", "cancer_type", "samplename", "icgc_donor_id",
"donor_age_at_diagnosis", "tumour_type", "histology_tier4", "HRDetect")]
## Check that age at diagnosis is identical in both - just sanity check
dtPcawg$comp = dtSurv$donor_age_at_diagnosis[ match(dtPcawg$icgc_donor_id, dtSurv$icgc_donor_id) ]
summary(dtPcawg$comp - dtPcawg$donor_age_at_diagnosis)
dtPcawg$comp = NULL
dtPcawg$vital_status = dtSurv$donor_vital_status[ match(dtPcawg$icgc_donor_id,
dtSurv$icgc_donor_id) ]
dtPcawg$survival_time = dtSurv$donor_survival_time[ match(dtPcawg$icgc_donor_id,
dtSurv$icgc_donor_id) ]
dtPcawg$last_follow_up = dtSurv$donor_interval_of_last_followup[ match(dtPcawg$icgc_donor_id,
dtSurv$icgc_donor_id) ]
## Combine survival_time and last_follow_up into one OS.time column
dtPcawg$OS.time = dtPcawg$survival_time
dtPcawg$OS.time[ is.na(dtPcawg$OS.time) ] = dtPcawg$last_follow_up[ is.na(dtPcawg$OS.time) ]
## Create data table with all information
dtPcawg$CX3 = mPCAWG[ match(dtPcawg$samplename, rownames(mPCAWG)), "CX3"]
dtPcawg$CX2 = mPCAWG[ match(dtPcawg$samplename, rownames(mPCAWG)), "CX2"]
## Convert survival
dtPcawg$OS = ifelse(dtPcawg$vital_status == "alive", 0, 1)
dtPcawg$OS[ dtPcawg$vital_status == "" ] = NA
## Add staging
## PCAWG
dtTS = fread(TSPCAWG)
dtPcawg$TS = dtTS$donor_tumour_stage_at_diagnosis[ match(dtPcawg$icgc_donor_id, dtTS$icgc_donor_id) ]
## TCGA
dtPcawg$TCGA = links$TCGA[ match(dtPcawg$icgc_donor_id, links$ICGC) ]
## Stratify by age
## Look at histogram of age and you see three dips, neatly dividing the cohort into four age groups.
dtPcawg$AgeCategory = cut(dtPcawg$donor_age_at_diagnosis, breaks = AGEBRACKETS, labels = 1:(length(AGEBRACKETS)-1))
## HRDetect
dtPcawg$HRDetectClass = ifelse(dtPcawg$HRDetect >= 0.7, "Positive", "Negative")
dtPcawg$HRDetectClass = factor(dtPcawg$HRDetectClass, levels = c("Negative","Positive"))
## CX classifier
dtPcawg = applyClinClass(dtPcawg, lModel)
## No HRD scores available for PCAWG
## Use only PCAWG-AU as PCAWG-US is the TCGA-OV cohort
dtOV = dtPcawg[ dtPcawg$projectcode == "OV-AU", ]
dtOV$TS[ dtOV$TS == "" ] = NA
write.table(dtOV, file.path(OUTTABLE, "Clinical_classifier_PCAWG_OV-AU.txt"), quote = FALSE,
sep = "\t", row.names = FALSE, col.names = TRUE)
CLASSIFIER = "Classifier"
lPCAWGAUCX = plotKMandCoxOS(dtOV, COHORTNAME = "PCAWG-AU", CLASSIFIERNAME = "CX3/CX2 classifier")
CLASSIFIER = "HRDetectClass"
lPCAWGAUHRDetect = plotKMandCoxOS(dtOV, COHORTNAME = "PCAWG-AU", CLASSIFIERNAME = "HRDetect")
lPCAWGAUCX$km
lPCAWGAUCX$cox
convertCoxPHToTextOut(lPCAWGAUCX$cox, "EDF_10_c_PCAWGOVAU_CX2CX3.txt")
lPCAWGAUHRDetect$kmPlot
lPCAWGAUHRDetect$km
convertCoxPHToTextOut(lPCAWGAUHRDetect$cox, "EDF_10_c_PCAWGOVAU_HRDetect.txt")
## ESAD
dtESAD = dtPcawg[ dtPcawg$cancer_type == "ESAD", ]
## Simpify staging
dtESAD$NewTS = NA
dtESAD$NewTS[ grepl("T1", dtESAD$TS) ] = "I"
dtESAD$NewTS[ grepl("T2", dtESAD$TS) ] = "II"
dtESAD$NewTS[ grepl("T3", dtESAD$TS) ] = "III"
dtESAD$NewTS[ grepl("T4", dtESAD$TS) ] = "IV"
dtESAD$NewTS = factor(dtESAD$NewTS, levels = c("I", "II", "III", "IV"))
dtESAD$TS = dtESAD$NewTS
dtESAD$NewTS = NULL
# Reclassify CX2CX3 because with TCGA-OV gBRCA1 scaling only one sample classified
mESAD = scale(as.matrix(dtESAD[,c("CX3", "CX2")]))
dtESAD$Classifier = ifelse(mESAD[, "CX3"] > mESAD[,"CX2"], "Predicted sensitive", "Predicted resistant")
dtESAD$Classifier = factor(dtESAD$Classifier , levels = c("Predicted resistant", "Predicted sensitive"))
write.table(dtESAD, file.path(OUTTABLE, "Clinical_classifier_PCAWG_ESDA_UK.txt"),
quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
CLASSIFIER = "Classifier"
lPCAWGESADCX = plotKMandCoxOS(dtESAD, COHORTNAME = "PCAWG-ESAD", CLASSIFIERNAME = "CX3/CX2 classifier")
CLASSIFIER = "HRDetectClass"
lPCAWGESADHRDetect = plotKMandCoxOS(dtESAD, COHORTNAME = "PCAWG-ESAD", CLASSIFIERNAME = "HRDetect", COXMODEL = "simple")
lPCAWGESADHRDetect$km
lPCAWGESADHRDetect$kmPlot
dtESAD
lPCAWGESADHRDetect$cox
convertCoxPHToTextOut(lPCAWGESADHRDetect$cox, "EDF_10_c_PCAWGESADUK_HRDetect.txt")
## Prepare survival
metaIcgc = fread(METAICGC560)
metaIcgc$OS = ifelse(metaIcgc$donor_vital_status == "alive", 0, 1)
metaIcgc$OS.time = NA
## Combine column of OS.time
## First use interval last check up as base (data points for survived patients)
metaIcgc$OS.time = metaIcgc$`donor_interval_of_last_follow-up_in_DAYS`
## Then add data from deceased people
metaIcgc$OS.time[ metaIcgc$donor_vital_status == "deceased" ] =
metaIcgc$donor_survival_time_in_DAYS[ metaIcgc$donor_vital_status == "deceased" ]
## Convert
metaIcgc$OS.time[ metaIcgc$OS.time == "no_data_supplied" ] = NA
metaIcgc$OS.time = as.numeric(metaIcgc$OS.time)
## Add HRDetect
dtHRDetect = fread(HRDETECTICGC560)
dtHRDetect$shortName = substr(dtHRDetect$sample, 1, nchar(dtHRDetect$sample)-1)
metaIcgc$HRDetectClass = ifelse(dtHRDetect$predictorProb[ match(metaIcgc$sample_name, dtHRDetect$shortName) ] > 0.7, "Positive", "Negative")
metaIcgc$HRDetectClass = factor(metaIcgc$HRDetectClass, levels = c("Negative", "Positive"))
## CX classifier
m560BC = readRDS(ICGC560)
rownames(m560BC) = substr(rownames(m560BC), 1, nchar(rownames(m560BC))-1)
metaIcgc$CX3 = m560BC[ match(metaIcgc$sample_name, rownames(m560BC)), "CX3" ]
metaIcgc$CX2 = m560BC[ match(metaIcgc$sample_name, rownames(m560BC)), "CX2" ]
metaIcgc = applyClinClass(metaIcgc, lModel)
## No HRD scores available for PCAWG
## Convert age and put into categories
metaIcgc$Age = metaIcgc$donor_age_at_diagnosis
metaIcgc$Age[ metaIcgc$Age == "over_80" ] = 80
metaIcgc$Age = as.numeric(metaIcgc$Age)
metaIcgc$AgeCategory = cut(metaIcgc$Age, breaks = AGEBRACKETS, labels = 1:(length(AGEBRACKETS)-1))
## Has tumour stage info already but in a different column
metaIcgc$TS = metaIcgc$T_stage
write.table(metaIcgc, file.path(OUTTABLE, "Clinical_classifier_ICGC_BRCA.txt"),
quote = FALSE, sep = "\t", row.names = FALSE, col.names = TRUE)
CLASSIFIER = "Classifier"
l560BCCX = plotKMandCoxOS(metaIcgc, COHORTNAME = "ICGC 560 Breast cancers", CLASSIFIERNAME = "CX3/CX2 classifier")
CLASSIFIER = "HRDetectClass"
l560BCHRDetect = plotKMandCoxOS(metaIcgc, COHORTNAME = "ICGC 560 Breast cancers", CLASSIFIERNAME = "HRDetect")
l560BCCX$km
l560BCCX$cox
convertCoxPHToTextOut(l560BCCX$cox, "EDF_10_c_ICGCBREAST_CX2CX£.txt")
convertCoxPHToTextOut(l560BCCX$cox, "EDF_10_c_ICGCBREAST_CX2CX3.txt")
l560BCHRDetect$km
l560BCHRDetect$cox
convertCoxPHToTextOut(l560BCHRDetect$cox, "EDF_10_c_ICGCBREAST_HRDetect.txt")
